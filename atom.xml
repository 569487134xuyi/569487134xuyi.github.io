<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://569487134xuyi.github.io</id>
    <title>xuyi.blog</title>
    <updated>2019-12-24T11:46:09.612Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://569487134xuyi.github.io"/>
    <link rel="self" href="https://569487134xuyi.github.io/atom.xml"/>
    <subtitle>温故而知新</subtitle>
    <logo>https://569487134xuyi.github.io/images/avatar.png</logo>
    <icon>https://569487134xuyi.github.io/favicon.ico</icon>
    <rights>All rights reserved 2019, xuyi.blog</rights>
    <entry>
        <title type="html"><![CDATA[Docker中运行OpenWrt作旁路由]]></title>
        <id>https://569487134xuyi.github.io/post/docker-zhong-yun-xing-openwrt-zuo-pang-lu-you</id>
        <link href="https://569487134xuyi.github.io/post/docker-zhong-yun-xing-openwrt-zuo-pang-lu-you">
        </link>
        <updated>2019-12-24T11:44:49.000Z</updated>
        <content type="html"><![CDATA[<h1 id="在docker中运行openwrt教程">在Docker中运行OpenWrt教程</h1>
<p>软件环境：<br>
Win10中运行的vm中运行的ubuntu中运行的Docker</p>
<p>网络环境：<br>
主路由：192.168.3.1/24 //没用到。。。<br>
Win10（主机）：192.168.3.15 //没用到。。。<br>
ubuntu（vm NAT模式）：192.168.78.128<br>
vm网关192.168.78.2<br>
OpenWrt（ubuntu中的Docker中运行）：192.168.78.135</p>
<h2 id="一-开启网卡混杂模式重要"><s>一、开启网卡混杂模式（重要）</s></h2>
<p><s>首先要开启Hyper-V中Debian虚拟机网卡的混杂模式，否则OpenWrt无法连网，主机也ping不通OpenWrt。</s></p>
<p><s>Enable promiscuous mode in Hyper-V:<br>
Hyper-V &gt; VM &gt; Settings &gt; NIC (click plus) &gt; ADVANCED FEATURE &gt; Enable MAC Address Spoofing<br>
(https://serverfault.com/questions/812528/docker-container-connection-in-macvlan-network)</s></p>
<p><s>如果是Linux环境，那么用ip link set eth0 promisc on即可。</s><br>
以上未验证</p>
<h2 id="二-选择openwrt镜像">二、选择OpenWrt镜像</h2>
<p>推荐两个：<br>
https://www.right.com.cn/forum/thread-866582-1-1.html<br>
<strong>https://www.right.com.cn/forum/thread-762559-1-1.html</strong>/用的这个，密码admin</p>
<h2 id="三-将openwrt镜像导入docker">三、将OpenWrt镜像导入Docker</h2>
<pre><code>mkdir ~/openwrt
mkdir /mnt/openwrt
cd ~/openwrt
mount -o loop openwrt-x86-64-rootfs-squashfs.img /mnt/openwrt
cd /mnt/openwrt/
tar zcf ~/openwrt/openwrt.tgz *
cd ~/openwrt
docker import openwrt.tgz openwrt
umount /mnt/openwrt
rm -r /mnt/openwrt
</code></pre>
<p>以上加sudo权限</p>
<h2 id="四-运行openwrt容器">四、运行OpenWrt容器</h2>
<p>docker network create -d macvlan --subnet=192.168.78.0/24 --gateway=192.168.78.2 -o parent=eth0(我这里是ens33） macvlan0 # 创建docker macvlan网络<br>
docker run --restart=always --privileged --name='openwrt' --net=macvlan0 --ip=192.168.2.135 --detach=true openwrt /sbin/init # 运行openwrt容器<br>
docker exec -it openwrt /bin/sh # 进入openwrt容器shell<br>
vi /etc/config/network # 编辑openwrt网络配置</p>
<pre><code>config interface 'lan'
        option type 'bridge'
        option ifname 'eth0'//eth0没修改，可以进管理页面，下次试试改ens33
        option proto 'static'
        option ipaddr '192.168.78.135'//修改管理地址
        option netmask '255.255.255.0'
        option ip6assign '60'
        option gateway '192.168.78.2'//修改网关
        option dns '192.168.78.2'
</code></pre>
<pre><code>/etc/init.d/network restart //重启网络
</code></pre>
<h2 id="以下未验证管理页面能进"><strong>以下未验证,管理页面能进</strong></h2>
<h2 id="五-docker宿主机debian配置网络"><s>五、Docker宿主机（Debian）配置网络</s></h2>
<p>注意：修改网络配置可能会让你失去对宿主机（Debian）的网络连接。</p>
<p>临时配置网络（重启后失效）<br>
添加macvlan桥接网卡，并将192.168.2.8分配到该网卡<br>
ip addr del 192.168.2.8/24 dev eth0; <br>
ip link add macvlan link eth0 type macvlan mode bridge; <br>
ip addr add 192.168.2.8/24 dev macvlan; <br>
ip link set macvlan up; \</p>
<p>替换默认路由到macvlan网卡<br>
ip route del 192.168.2.0/24 dev eth0; <br>
ip route del default; <br>
ip route add 192.168.2.0/24 dev macvlan; <br>
ip route add default via 192.168.2.1 dev macvlan;</p>
<p>永久配置网络（重启也能生效）<br>
宿主机（Debian）修改网络配置：vi /etc/network/interface</p>
<p>将：</p>
<p>auto eth0<br>
iface eth0 inet static<br>
address 192.168.2.8<br>
broadcast 192.168.2.255<br>
netmask 255.255.255.0<br>
gateway 192.168.2.1<br>
dns-nameservers 192.168.2.1<br>
修改为：</p>
<p>auto eth0<br>
iface eth0 inet manual</p>
<p>auto macvlan<br>
iface macvlan inet static<br>
address 192.168.2.8<br>
netmask 255.255.255.0<br>
gateway 192.168.2.1<br>
dns-nameservers 192.168.2.1<br>
pre-up ip link add macvlan link eth0 type macvlan mode bridge<br>
post-down ip link del macvlan link eth0 type macvlan mode bridge<br>
修改完后重启网络systemctl restart networking或者重启系统查看效果。</p>
<h2 id="六-打开openwrt管理页面">六、打开Openwrt管理页面</h2>
<p><s>此时，如果配置正常的话</s>，在局域网中就可以访问 http://192.168.78.135/ 来打开OpenWrt的管理页面了。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[nps-server nps-client docker 脚本]]></title>
        <id>https://569487134xuyi.github.io/post/nps-docker-jiao-ben</id>
        <link href="https://569487134xuyi.github.io/post/nps-docker-jiao-ben">
        </link>
        <updated>2019-11-09T10:41:58.000Z</updated>
        <content type="html"><![CDATA[<p>#nps-server dockerfile</p>
<pre><code class="language-Dockerfile">FROM alpine:3.10

WORKDIR /
ENV NPS_VERSION 0.23.2
ENV NPS_RELEASE_URL https://github.com/cnlh/nps/releases/download/v0.23.2/linux_amd64_server.tar.gz

RUN set -x &amp;&amp; \
	wget --no-check-certificate ${NPS_RELEASE_URL} &amp;&amp; \ 
	tar xzf linux_amd64_server.tar.gz &amp;&amp; \
    rm linux_amd64_server.tar.gz

VOLUME /nps/conf

CMD /nps/nps
</code></pre>
<p>#nps-clinet dockerfile</p>
<pre><code class="language-Dockerfile">FROM alpine:3.10

WORKDIR /
ENV NPC_VERSION 0.23.2
ENV NPS_RELEASE_URL https://github.com/cnlh/nps/releases/download/v0.23.2/linux_amd64_client.tar.gz
RUN set -x &amp;&amp; \
	wget --no-check-certificate ${NPS_RELEASE_URL} &amp;&amp; \ 
	tar xzf linux_amd64_client.tar.gz &amp;&amp; \
	mv /nps /npc

ENV SERVERIP 127.0.0.1:8284
ENV VKEY 123

CMD /npc/npc -server=${SERVERIP} -vkey=${VKEY}
</code></pre>
<p>##启动客户端</p>
<pre><code>docker run -d --name npc -e SERVERIP=ip:port -e VKEY=key zzz7886856/npc-client</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Docker脚本]]></title>
        <id>https://569487134xuyi.github.io/post/docker-jiao-ben</id>
        <link href="https://569487134xuyi.github.io/post/docker-jiao-ben">
        </link>
        <updated>2019-08-27T08:30:22.000Z</updated>
        <content type="html"><![CDATA[<h2 id="transmission">transmission</h2>
<pre><code>docker create \
  --name=transmission \
  -e PUID=1000 \
  -e PGID=1000 \
  -e TZ=Europe/London \
  -e TRANSMISSION_WEB_HOME=/transmission-web-control/  \
  -e USER=xuyi  \
  -e PASS=zzz569487134  \
  -p 9091:9091 \
  -p 51413:51413 \
  -p 51413:51413/udp \
  -v /path/to/config:/config \
  -v /path/to/download:/downloads \
  -v /path/to/watch:/watch \
  --restart unless-stopped \
  linuxserver/transmission
</code></pre>
<h2 id="samba">samba</h2>
<pre><code>docker run -it -e TZ=Asia/Shanghai --name samba -p 139:139 -p 445:445 -v /path/to/share:/mount -d dperson/samba  -u &quot;username;password&quot; -s &quot;share;/mount;yes;no;yes;&quot;
</code></pre>
<h2 id="远程迅雷">远程迅雷</h2>
<pre><code>docker run -d \
        --restart always \
        --name xware \
        --net host \
        -v /path/to/download:/app/TDDOWNLOAD \
        -v /path/to/config:/app/bin/cfg \
        senorsen/docker-thunder-xware
</code></pre>
<h2 id="dlna">DLNA</h2>
<pre><code>docker run -d --net=host \
  -p 8200:8200 \
  -v /path/to/share:/media \
  -e MINIDLNA_MEDIA_DIR=/media \
  -e MINIDLNA_FRIENDLY_NAME=MyMini \
  vladgh/minidlna
### docker-compose
version: '3.1'
services:
  minidlna:
    image: vladgh/minidlna
    container_name: minidlna
    restart: always
    network_mode: 'host'
    environment:
      - MINIDLNA_MEDIA_DIR=/media
      - MINIDLNA_FRIENDLY_NAME=MiniDLNA
      - MINIDLNA_INOTIFY=yes
      - MINIDLNA_NOTIFY_INTERVAL=30
    volumes:
      - /path/to/config:/var/lib/minidlna
      - /path/to/share:/media
    logging:
      driver: &quot;json-file&quot;
      options:
        max-size: &quot;1m&quot;
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[PVE设置]]></title>
        <id>https://569487134xuyi.github.io/post/pve-she-zhi</id>
        <link href="https://569487134xuyi.github.io/post/pve-she-zhi">
        </link>
        <updated>2019-08-27T08:10:38.000Z</updated>
        <content type="html"><![CDATA[<h2 id="换源">换源</h2>
<pre><code>rm /etc/apt/sources.list.d/pve-enterprise.list

wget http://mirrors.ustc.edu.cn/proxmox/debian/proxmox-ve-release-5.x.gpg -O /etc/apt/trusted.gpg.d/proxmox-ve-release-5.x.gpg

wget http://mirrors.ustc.edu.cn/proxmox/debian/proxmox-ve-release-6.x.gpg -O /etc/apt/trusted.gpg.d/proxmox-ve-release-6.x.gpg

echo 'deb http://mirrors.ustc.edu.cn/proxmox/debian buster pve-no-subscription'&gt;/etc/apt/sources.list.d/pve-install-repo.list

sed -i 's/ftp.debian.org/mirrors.163.com/g' /etc/apt/sources.list
sed -i 's/security.debian.org/mirrors.163.com\/debian-security/g' /etc/apt/sources.list

apt update
apt dist-upgrade
</code></pre>
<p>##去订阅弹窗</p>
<pre><code>sed -i &quot;s/data.status !== 'Active'/false/g&quot; /usr/share/javascript/proxmox-widget-toolkit/proxmoxlib.js
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[酸酸乳]]></title>
        <id>https://569487134xuyi.github.io/post/suan-suan-ru</id>
        <link href="https://569487134xuyi.github.io/post/suan-suan-ru">
        </link>
        <updated>2019-08-13T12:05:34.000Z</updated>
        <content type="html"><![CDATA[<p>#服务器推荐<br>
<a href="https://www.vultr.com">www.vultr.com</a><br>
#命令</p>
<pre><code>wget -N --no-check-certificate https://raw.githubusercontent.com/ToyoDAdoubi/doubi/master/ssr.sh &amp;&amp; chmod +x ssr.sh &amp;&amp; bash ssr.sh
</code></pre>
<p>按提示</p>
<pre><code>wget -N --no-check-certificate https://raw.githubusercontent.com/91yun/serverspeeder/master/serverspeeder-all.sh &amp;&amp; bash serverspeeder-all.sh
</code></pre>
<p>重启</p>
<pre><code>reboot
</code></pre>
<p>#windows客户端<br>
<a href="https://github.com/shadowsocksr-backup/shadowsocksr-csharp/releases">github地址</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Docker]]></title>
        <id>https://569487134xuyi.github.io/post/docker</id>
        <link href="https://569487134xuyi.github.io/post/docker">
        </link>
        <updated>2019-06-09T09:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>docker 安装配置</p>
]]></summary>
        <content type="html"><![CDATA[<p>docker 安装配置</p>
<!-- more -->
<h1 id="docker-安装">docker 安装</h1>
<hr>
<h2 id="一键脚本安装">一键脚本安装</h2>
<pre><code class="language-bash">curl -fsSL https://get.docker.com -o get-docker.sh
sudo sh get-docker.sh
</code></pre>
<h2 id="手动安装">手动安装</h2>
<h3 id="卸载旧版本">卸载旧版本</h3>
<pre><code class="language-bash">sudo apt-get remove docker docker-engine docker.io containerd runc
</code></pre>
<h3 id="使用存储库安装">使用存储库安装</h3>
<h4 id="更新-apt-包索引">更新 apt 包索引</h4>
<pre><code class="language-bash">sudo apt-get update
</code></pre>
<h4 id="安装包以允许-apt-通过-https-使用存储库">安装包以允许 apt 通过 HTTPS 使用存储库</h4>
<pre><code class="language-bash">sudo apt-get install \
    apt-transport-https \
    ca-certificates \
    curl \
    gnupg-agent \
    software-properties-common
</code></pre>
<h4 id="添加-docker-的官方-gpg-密钥">添加 Docker 的官方 GPG 密钥</h4>
<pre><code class="language-bash">curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
</code></pre>
<p>验证您现在拥有带指纹的密钥</p>
<pre><code class="language-bash">sudo apt-key fingerprint 0EBFCD88
</code></pre>
<h4 id="使用以下命令设置稳定存储库">使用以下命令设置稳定存储库</h4>
<h5 id="x86_64-amd64-架构">x86_64 / amd64 架构</h5>
<pre><code>sudo add-apt-repository \
   &quot;deb [arch=amd64] https://download.docker.com/linux/ubuntu \
   $(lsb_release -cs) \
   stable&quot;
</code></pre>
<p>ubuntu 自己改系统<br>
$(lsb_release -cs) 自己改版本号，否则出各种问题<br>
<a href="https://mirrors.aliyun.com/docker-ce/linux/">阿里源 docker-ce</a></p>
<h5 id="arm-架构">arm 架构</h5>
<pre><code class="language-bash">sudo add-apt-repository \
   &quot;deb [arch=armhf] https://download.docker.com/linux/ubuntu \
   $(lsb_release -cs) \
   stable&quot;
</code></pre>
<p>同上</p>
<h4 id="安装-docker-ce">安装 DOCKER CE</h4>
<pre><code class="language-bash">sudo apt-get update
sudo apt-get install docker-ce docker-ce-cli containerd.io
</code></pre>
<h3 id="将当前用户加入-docker-用户组">将当前用户加入 docker 用户组</h3>
<pre><code class="language-bash">sudo groupadd docker     #添加docker用户组
sudo gpasswd -a $USER docker     #将登陆用户加入到docker用户组中
newgrp docker     #更新用户组
</code></pre>
<h3 id="验证安装">验证安装</h3>
<pre><code>docker ps
</code></pre>
<p>通过运行 hello-world 映像验证是否正确安装了 Docker CE</p>
<h3 id="配置-docker-以在启动时启动">配置 Docker 以在启动时启动</h3>
<pre><code class="language-bash">sudo systemctl enable docker
</code></pre>
<p>取消开机启动</p>
<pre><code class="language-bash">sudo systemctl disable docker
</code></pre>
<h3 id="跟换国内仓库">跟换国内仓库</h3>
<pre><code> sudo vim /etc/docker/daemon.json
</code></pre>
<p>写入</p>
<pre><code>{
 &quot;registry-mirrors&quot;: [&quot;https://registry.docker-cn.com&quot;]
}
</code></pre>
<p>重启 docker</p>
<pre><code>sudo service docker restart
</code></pre>
<h3 id="docker-portainer-单机安装">docker Portainer 单机安装</h3>
<pre><code>docker search portainer
docker pull portainer/portainer
docker run -d -p 9000:9000 \
    --restart=always \
    -v /var/run/docker.sock:/var/run/docker.sock \
    --name prtainer \
    portainer/portainer
</code></pre>
<p>访问地址 IP:PORT，第一次输入用户名及密码</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[hexo]]></title>
        <id>https://569487134xuyi.github.io/post/hexo</id>
        <link href="https://569487134xuyi.github.io/post/hexo">
        </link>
        <updated>2019-06-02T11:30:00.000Z</updated>
        <summary type="html"><![CDATA[<p>github+hexo 搭建</p>
]]></summary>
        <content type="html"><![CDATA[<p>github+hexo 搭建</p>
<!-- more -->
<h1 id="githubhexo-搭建">github+hexo 搭建</h1>
<hr>
<h2 id="github-部分">github 部分</h2>
<p><a href="https://github.com/">github.com</a><br>
github.com 注册<br>
你的 github 地址：github.com/username（你的注册名）<br>
start a project 按钮新建一个 repositories（仓库）<br>
仓库名：username <font color=#008000><strong>(和上面一样，这里不要用别的)</strong></font>.github.io<br>
creat repository 创建仓库</p>
<hr>
<h2 id="git-及-nodejs-安装">git 及 node.js 安装</h2>
<p><a href="https://git-scm.com/">git</a><br>
一直下一步不多说<br>
安装完了右键 git bash</p>
<pre><code class="language-bash">git config user.name 'github用户名'
git config user.email '邮箱'
</code></pre>
<p><a href="https://nodejs.org/en/">node.js</a><br>
下载完一直下一步安装</p>
<pre><code>node -v
npm -v
git -version
</code></pre>
<p>看一下 node.js,npm,git 版本信息<br>
以上没成功，环境变量自己再看下</p>
<hr>
<h2 id="hexo-部分">hexo 部分</h2>
<p><a href="https://hexo.io/zh-cn/">hexo.io</a><br>
右键 git bash here<br>
输入以下</p>
<pre><code class="language-bash">npm install hexo-cli -g
hexo init blog
cd blog
npm install
hexo server
</code></pre>
<p>安装出现 warn 都不要管<br>
上面会自动创建一个 blog 文件夹，进入 blog 并启动 hexo<br>
地址在本地 4000 端口<br>
<a href="http://localhost:4000/">http://localhost:4000/</a></p>
<p>在 blog/source/_posts 下有自动创建的一篇 helloworld 的初始化文章</p>
<p>如果想要添加新的文章，可以在命令行输入 hexo new 'filename',就会生成一个新的.md 文件，对它编辑就可以了</p>
<hr>
<h2 id="上传至-github">上传至 github</h2>
<p>开配置文档_config.yml，对它做如下修改</p>
<pre><code>deploy:
  type: git
  repo: git@github.com:username/username.github.io.git
  branch: master
</code></pre>
<p>git bash 中输入</p>
<pre><code>npm install hexo-deployer-git --save
</code></pre>
<p>安装 git 插件<br>
再输入</p>
<pre><code>hexo g
hexo d
</code></pre>
<p>开始上传<br>
打开 username.github.io blog 就部署好了</p>
<hr>
<p>结束</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hello Gridea]]></title>
        <id>https://569487134xuyi.github.io/post/hello-gridea</id>
        <link href="https://569487134xuyi.github.io/post/hello-gridea">
        </link>
        <updated>2018-12-11T16:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
]]></summary>
        <content type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
<!-- more -->
<p><a href="https://github.com/getgridea/gridea">Github</a><br>
<a href="http://hvenotes.fehey.com/">Gridea 主页</a><br>
<a href="http://fehey.com/">示例网站</a></p>
<h2 id="特性">特性👇</h2>
<p>📝  你可以使用最酷的 <strong>Markdown</strong> 语法，进行快速创作</p>
<p>🌉  你可以给文章配上精美的封面图和在文章任意位置插入图片</p>
<p>🏷️  你可以对文章进行标签分组</p>
<p>📋  你可以自定义菜单，甚至可以创建外部链接菜单</p>
<p>💻  你可以在 <strong>𝖶𝗂𝗇𝖽𝗈𝗐𝗌</strong> 或 <strong>𝖬𝖺𝖼𝖮𝖲</strong> 设备上使用此客户端</p>
<p>🌎  你可以使用 <strong>𝖦𝗂𝗍𝗁𝗎𝖻 𝖯𝖺𝗀𝖾𝗌</strong> 或 <strong>Coding Pages</strong> 向世界展示，未来将支持更多平台</p>
<p>💬  你可以进行简单的配置，接入 <a href="https://github.com/gitalk/gitalk">Gitalk</a> 或 <a href="https://github.com/SukkaW/DisqusJS">DisqusJS</a> 评论系统</p>
<p>🇬🇧  你可以使用<strong>中文简体</strong>或<strong>英语</strong></p>
<p>🌁  你可以任意使用应用内默认主题或任意第三方主题，强大的主题自定义能力</p>
<p>🖥  你可以自定义源文件夹，利用 OneDrive、百度网盘、iCloud、Dropbox 等进行多设备同步</p>
<p>🌱 当然 <strong>Gridea</strong> 还很年轻，有很多不足，但请相信，它会不停向前🏃</p>
<p>未来，它一定会成为你离不开的伙伴</p>
<p>尽情发挥你的才华吧！</p>
<p>😘 Enjoy~</p>
]]></content>
    </entry>
</feed>